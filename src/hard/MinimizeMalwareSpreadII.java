package hard;

import java.util.HashSet;
import java.util.Set;

/*
    Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected
    and at least one of those two nodes is infected by malware, both nodes will be infected by malware.
    This spread of malware will continue until no more nodes can be infected in this manner.

    Suppose M(initial) is the final number of nodes infected with malware in
    the entire network, after the spread of malware stops.

    We will remove one node from the initial list, completely removing it and any connections
    from this node to any other node.  Return the node that if removed, would minimize M(initial).
    If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.
 */
public class MinimizeMalwareSpreadII {

    private int count;

    public static void main(String... args) {

        int[] initial = {0, 1};
        int[][] graph = {{1,1,0}, {1,1,1}, {0,1,1}};
        MinimizeMalwareSpreadII minimizeMalwareSpreadII = new MinimizeMalwareSpreadII();
        System.out.println(minimizeMalwareSpreadII.minMalwareSpread(graph, initial));
    }

    private void dfs(int n, boolean[] t, Set<Integer>[] e) {

        count++;
        t[n] = true;
        for (int x : e[n]) if (!t[x]) dfs(x, t, e);
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {

        int n = graph.length, result = n+1, min = n+1;
        boolean[] f = new boolean[n];
        Set<Integer>[] e = new Set[n];
        for (int x : initial) f[x] = true;

        for (int i = 0; i < n; i++) {

            e[i] = new HashSet<>();

            for (int j = 0; j < n; j++)
                if (graph[i][j] == 1 && i != j)
                    e[i].add(j);
        }

        for (int x : initial) {

            boolean[] t = new boolean[n];
            t[x] = true;
            count = 0;

            for (int i = 0; i < n; i++)
                if (!t[i] && f[i])
                    dfs(i, t, e);

            if (count < min || count == min && x < result) {
                result = x;
                min = count;
            }
        }

        return result;
    }

}
